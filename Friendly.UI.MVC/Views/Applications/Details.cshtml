@model Friendly.DATA.EF.Application

@{
    ViewBag.Title = "Application";
}

<div class="card">
    <div class="card-content">
        <span class="card-title grey-text text-darken-4">@Model.OpenFriendship.Friendship.Title</span>
        <div class="section row">
            <h5>Clique Info</h5>
            <div class="col s12 m6 l4">
                <i class="material-icons left">group</i>@Model.OpenFriendship.Clique.Name
            </div>
            <div class="col s12 m6 l4">
                <i class="material-icons left">place</i>@Model.OpenFriendship.Clique.Location
            </div>
            <div class="col s12 m6 l4">
                <i class="material-icons left">verified_user</i>@Model.OpenFriendship.Clique.UserDetail.FullName
            </div>
        </div>

        <div class="divider"></div>

        <div class="section row">
            <h5>Applicant</h5>
            <div class="col s12 m6">
                <i class="material-icons left">person</i>@Model.UserDetail.FullName
            </div>
            <div class="col s12 m6">
                <i class="material-icons left">calendar_today</i>@Model.ApplicationDate
            </div>
        </div>

        <div class="divider"></div>

        <div class="section">
            <h5>Resume</h5>
            @*<canvas id="resumeCanvas"></canvas>*@
            <embed src="@Url.Content("~/Content/Resumes/" + Model.ResumeFilename)" style="width:100%;height:600px;" alt="Unable to load current resume" />
        </div>

        @if (User.IsInRole("Alpha") || User.IsInRole("Beta"))
        {
            <div class="divider"></div>

            <div class="section">
                <h5>Superior Notes</h5>
                @if (User.IsInRole("Alpha"))
                {
                    <blockquote>
                        @Model.ManagerNotes
                    </blockquote>
                }
                else
                {
                    using (Html.BeginForm("UpdateNotes", "Applications", new { id = Model.ApplicationId }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="input-field">
                            @Html.EditorFor(model => model.ManagerNotes, new { htmlAttributes = new { @class = "materialize-textarea", placeholder = "Enter some notes here..." } })
                            @Html.ValidationMessageFor(model => model.ManagerNotes, "", new { @class = "text-danger" })
                            <button type="submit" class="btn accent waves-effect waves-light left">Update</button>
                        </div>
                    }
                }
            </div>
        }
    </div>

    <div class="card-action">
        <a href="@Url.Action("Index")" class="btn-flat waves-effect waves-accent accent-text">Back</a>
        <div class="right valign-wrapper">
            <i id="applicationStatus" class="material-icons left">
                @switch (Model.ApplicationStatus.StatusName.ToLower())
                {
                    case "accepted":
                        @:check_circle
                        break;
                    case "rejected":
                        @:cancel
                        break;
                    case "pending":
                        @:help
                        break;
                }
            </i>
            @if (Model.ApplicationStatusId == 1 && User.IsInRole("Beta"))
            {
                <button id="acceptBtn" onclick="accept()" class="btn green">Accept</button>
                <button id="rejectBtn" onclick="reject()" class="btn red">Reject</button>
            }
            else
            {
                <button id="acceptBtn" class="btn-flat disabled" disabled>Accept</button>
                <button id="rejectBtn" class="btn-flat disabled" disabled>Reject</button>
            }
        </div>
    </div>
</div>

@section Scripts {
    @if (Model.ApplicationStatusId == 1 && User.IsInRole("Beta"))
    {
        <script>
            function accept() {
                fetch('/Applications/Accept/@Model.ApplicationId')
                    .then((res) => { return res.json() })
                    .then((data) => {
                        if (data.status == 200) {
                            applicationStatus.textContent = "check_circle";
                        }
                        acceptBtn.setAttribute("disabled", "true");
                        rejectBtn.setAttribute("disabled", "true");
                        M.toast({ html: data.message });
                    });
            }

                async function reject() {
                    fetch('/Applications/Reject/@Model.ApplicationId')
                        .then((res) => { return res.json() })
                        .then((data) => {
                        if (data.status == 200) {
                            applicationStatus.textContent = "cancel";
                        }
                        acceptBtn.setAttribute("disabled", "true");
                        rejectBtn.setAttribute("disabled", "true");
                        M.toast({ html: data.message });
                    });
	            }
        </script>
    }
}